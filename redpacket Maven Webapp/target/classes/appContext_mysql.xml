<beans xmlns="http://www.springframework.org/schema/beans"  
      xmlns:context="http://www.springframework.org/schema/context"  
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
      xmlns:tx="http://www.springframework.org/schema/tx"
      xsi:schemaLocation="http://www.springframework.org/schema/beans 
      	     http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  
             http://www.springframework.org/schema/context 
             http://www.springframework.org/schema/context/spring-context-2.5.xsd
             http://www.springframework.org/schema/tx 
             http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">  
    
    
    <!-- 读取jdbc.properties配置文件 -->
   <!--  <context:property-placeholder location="classpath:jdbc.properties" /> -->
   
    <!--配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${mysql.driverClassName}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${maxIdle}" />
        <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${minIdle}" />
    </bean>
	
    <!--
        采用注解方式来配置事务。针对数据源的事务管理器
        ，把我们定义的数据源注入到DataSourceTransactionManager类的属性dataSource中
    -->
    <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!--
        引入命名空间： 1.xmlns:tx="http://www.springframework.org/schema/tx
        2.http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        采用@Transaction注解方式使用事务管理器
    -->
    <tx:annotation-driven transaction-manager="txManager" />
    
    
     <!--  spring提供的jdbc操作辅助类 JDBC直接访问-->
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
        <property name="dataSource" ref="dataSource" />
     </bean>
     
     <!-- service 访问mysql,注入静态类 -->
     <bean id="mysqlJdbcTemplate" class="com.yubin.hongbao.common.MysqlJdbcTemplate" >
        <property name="jdbcTemplate" ref="jdbcTemplate" />
     </bean>

         
 </beans>  

